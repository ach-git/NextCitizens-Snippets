{
  "Discord.addAsset": {
    "prefix": "Discord.addAsset",
    "body": [
      "Discord.addAsset(${1:name}, ${2:text})"
    ],
    "description": "Soon"
  },
  "Discord.addFirstAction": {
    "prefix": "Discord.addFirstAction",
    "body": [
      "Discord.addFirstAction(${1:label}, ${2:url})"
    ],
    "description": "Soon"
  },
  "Discord.addSecondAction": {
    "prefix": "Discord.addSecondAction",
    "body": [
      "Discord.addSecondAction(${1:label}, ${2:url})"
    ],
    "description": "Soon"
  },
  "Discord.addSmallAsset": {
    "prefix": "Discord.addSmallAsset",
    "body": [
      "Discord.addSmallAsset(${1:name}, ${2:text})"
    ],
    "description": "Soon"
  },
  "Discord.details": {
    "prefix": "Discord.details",
    "body": [
      "Discord.details(${1:details})"
    ],
    "description": "Soon"
  },
  "Discord.setup": {
    "prefix": "Discord.setup",
    "body": [
      "Discord.setup(${1:appId})"
    ],
    "description": "Soon"
  },


  "Maths.groupDigits": {
    "prefix": "Maths.groupDigits",
    "body": [
      "Maths.groupDigits(${1:digits})"
    ],
    "description": "Soon"
  },
  "Maths.round": {
    "prefix": "Maths.round",
    "body": [
      "Maths.round(${1:number}, ${2:decimalPlace})"
    ],
    "description": "Soon"
  },


  "Objects.serverCreateObject": {
    "prefix": "Objects.serverCreateObject",
    "body": [
      "Objects.serverCreateObject(${1:props}, ${2:x}, ${3:y}, ${4:z}, ${5:h})"
    ],
    "description": "Soon"
  },


  "Ped.playAnimation": {
    "prefix": "Ped.playAnimation",
    "body": [
      "Ped.playAnimation(${1:props}, ${2:x}, ${3:y}, ${4:z}, ${5:h})"
    ],
    "description": "Soon"
  },


  "Player.getClosest": {
    "prefix": "Player.getClosest",
    "body": [
      "Player.getClosest()"
    ],
    "description": "Soon"
  },
  "Player.registerKeyBind": {
    "prefix": "Player.registerKeyBind",
    "body": [
      "Player.registerKeyBind(${1:name}, ${2:defaultKey}, ${3:desc}, ${4:callback})"
    ],
    "description": "Soon"
  },
  "Player.show3DText": {
    "prefix": "Player.show3DText",
    "body": [
      "Player.show3DText(${1:x}, ${2:y}, ${3:z}, ${4:text})"
    ],
    "description": "Soon"
  },
  "Player.showAdvancedNotification": {
    "prefix": "Player.showAdvancedNotification",
    "body": [
      "Player.showAdvancedNotification(${1:icon}, ${2:type}, ${3:sender}, ${4:title}, ${5:text}, ${6:colorBg})"
    ],
    "description": "Soon"
  },
  "Player.showHelpNotification": {
    "prefix": "Player.showHelpNotification",
    "body": [
      "Player.showHelpNotification(${1:text})"
    ],
    "description": "Soon"
  },
  "Player.showKeyboard": {
    "prefix": "Player.showKeyboard",
    "body": [
      "Player.showKeyboard(${1:textEntry}, ${2:exampleText}, ${3:maxInputLength})"
    ],
    "description": "Soon"
  },
  "Player.showMissionNotification": {
    "prefix": "Player.showMissionNotification",
    "body": [
      "Player.showMissionNotification(${1:text}, ${2:time})"
    ],
    "description": "Soon"
  },
  "Player.showNotification": {
    "prefix": "Player.showNotification",
    "body": [
      "Player.showNotification(${1:text}, ${2:colorBg})"
    ],
    "description": "Soon"
  },
  "Player.showSubtitle": {
    "prefix": "Player.showSubtitle",
    "body": [
      "Player.showSubtitle(${1:text})"
    ],
    "description": "Soon"
  },
  
  "Player.getLicense": {
    "prefix": "Player.getLicense",
    "body": [
      "Player.getLicense(${1:playerId})"
    ],
    "description": "Soon"
  },
  "Player.getName": {
    "prefix": "Player.getName",
    "body": [
      "Player.getName(${1:playerId})"
    ],
    "description": "Soon"
  },

  
  "Strings.contains": {
    "prefix": "Strings.contains",
    "body": [
      "Strings.contains(${1:str}, ${2:otherStr})"
    ],
    "description": "Soon"
  },
  "Strings.firstToUpper": {
    "prefix": "Strings.firstToUpper",
    "body": [
      "Strings.firstToUpper(${1:str})"
    ],
    "description": "Soon"
  },

  
  "Tables.sortAlphabetically": {
    "prefix": "Tables.sortAlphabetically",
    "body": [
      "Tables.sortAlphabetically(${1:table})"
    ],
    "description": "Soon"
  },


  "Vehicles.delete": {
    "prefix": "Tables.delete",
    "body": [
      "Tables.delete(${1:vehicleEntity})"
    ],
    "description": "Soon"
  },
  "Vehicles.getClosest": {
    "prefix": "Tables.getClosest",
    "body": [
      "Tables.getClosest(${1:coords})"
    ],
    "description": "Soon"
  },
  "Vehicles.getModel": {
    "prefix": "Tables.getModel",
    "body": [
      "Tables.getModel(${1:vehicleId})"
    ],
    "description": "Soon"
  },
  "Vehicles.getProperties": {
    "prefix": "Tables.getProperties",
    "body": [
      "Tables.getProperties(${1:vehicleEntity})"
    ],
    "description": "Soon"
  },
  "Vehicles.getStates": {
    "prefix": "Tables.getStates",
    "body": [
      "Tables.getStates(${1:vehicle})"
    ],
    "description": "Soon"
  },
  "Vehicles.getVehicles": {
    "prefix": "Tables.getVehicles",
    "body": [
      "Tables.getVehicles()"
    ],
    "description": "Soon"
  },
  "Vehicles.repair": {
    "prefix": "Tables.repair",
    "body": [
      "Tables.repair(${1:vehicleEntity})"
    ],
    "description": "Soon"
  },
  "Vehicles.setProperties": {
    "prefix": "Tables.setProperties",
    "body": [
      "Tables.setProperties(${1:vehicleEntity}, ${2:props})"
    ],
    "description": "Soon"
  },
  "Vehicles.spawn": {
    "prefix": "Tables.spawn",
    "body": [
      "Tables.spawn(${1:modelName}, ${2:coords}, ${3:heading}, ${4:cb}, ${5:clientSide})"
    ],
    "description": "Soon"
  },
  
  "Vehicles.serverSpawn": {
    "prefix": "Tables.serverSpawn",
    "body": [
      "Tables.serverSpawn(${1:modelName}, ${2:coords}, ${3:cb})"
    ],
    "description": "Soon"
  },


  "_NCS:triggerServerEvent": {
    "prefix": "_NCS:triggerServerEvent",
    "body": [
      "_NCS:triggerServerEvent(${1:eventName}, ${2:...})"
    ],
    "description": "ncs_core/src/core/client.lua"
  },
  "_NCS:triggerClientEvent": {
    "prefix": "_NCS:triggerClientEvent",
    "body": [
        "_NCS:triggerClientEvent(${1:eventName}, ${2:targetId}, ${3:...})"
    ],
    "description": "ncs_core/src/core/server.lua"
  },
  "_NCS:getVersion": {
    "prefix": "_NCS:getVersion",
    "body": [
        "_NCS:getVersion()"
    ],
    "description": "ncs_core/src/core/shared.lua"
  },
  "_NCS:trace": {
    "prefix": "_NCS:trace",
    "body": [
        "_NCS:trace(${1:message}, ${2:logLevelIndex})"
    ],
    "description": "ncs_core/src/core/shared.lua"
  },
  "_NCS:coreTrace": {
    "prefix": "_NCS:coreTrace",
    "body": [
        "_NCS:coreTrace(${1:message})"
    ],
    "description": "ncs_core/src/core/shared.lua"
  },
  "_NCS:die": {
    "prefix": "_NCS:die",
    "body": [
        "_NCS:die(${1:reason})"
    ],
    "description": "ncs_core/src/core/shared.lua"
  },
  "_NCS:registerNetEvent": {
    "prefix": "_NCS:registerNetEvent",
    "body": [
        "_NCS:registerNetEvent(${1:eventName}, ${2:...})"
    ],
    "description": "ncs_core/src/core/shared.lua"
  },
  "_NCS:handleEvent": {
    "prefix": "_NCS:handleEvent",
    "body": [
        "_NCS:handleEvent(${1:eventName}, ${2:callback})"
    ],
    "description": "ncs_core/src/core/shared.lua"
  },
  "_NCS:triggerEvent": {
    "prefix": "_NCS:triggerEvent",
    "body": [
        "_NCS:triggerEvent(${1:eventName}, ${2:...})"
    ],
    "description": "ncs_core/src/core/shared.lua"
  },
  "_NCS:onReady": {
    "prefix": "_NCS:onReady",
    "body": [
        "_NCS:onReady(${1:callback})"
    ],
    "description": "ncs_core/src/core/shared.lua"
  },
  "_NCS:formatEvent": {
    "prefix": "_NCS:formatEvent",
    "body": [
        "_NCS:formatEvent(${1:eventName})"
    ],
    "description": "ncs_core/src/core/shared.lua"
  },

  "export[\"ncs_core\"]:getLibrary()": {
    "prefix": "_NCS:formatEvent",
    "body": [
        "_NCS:formatEvent(${1:eventName})"
    ],
    "description": "ncs_core/src/core/shared.lua"
  }
}